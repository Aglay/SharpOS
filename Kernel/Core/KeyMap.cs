// 
// (C) 2006-2007 The SharpOS Project Team (http://www.sharpos.org)
//
// Authors:
//	Sander van Rossen <sander.vanrossen@gmail.com>
//	William Lahti <xfurious@gmail.com>
//
// Licensed under the terms of the GNU GPL License version 2.
//

using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;
using SharpOS;
using SharpOS.ADC;
using SharpOS.AOT.X86;
using SharpOS.AOT.IR;
using SharpOS.Foundation;
using AOTAttr = SharpOS.AOT.Attributes;

namespace SharpOS 
{
	public unsafe class Keymap
	{
		/// <summary>
		/// Locates the archive of built-in keymaps, parses the
		/// user-specified keymap from the kernel command line,
		/// and installs a default keymap.
		/// </summary>
		public static void Setup ()
		{
			int keymapLen = 0;
			
			// look for the -keymap option, find a
			// matching keymap from the archive, and
			// use the Keyboard class to set it as
			// the installed keymap.
			
			userKeymap = CommandLine.GetArgument (
				Kernel.String ("-keymap"), &keymapLen);

			userKeymapLen = keymapLen;
			
			// if there is no user choice, pick a default
			
			if (userKeymap == null) {
				TextMode.WriteLine (Kernel.String ("No keymap selected, choosing default (US)"));
				
				userKeymap = Kernel.String ("US");
				userKeymapLen = 2;
			}

			keymapArchive = (void*)Kernel.GetFunctionPointer
				("SharpOS.Kernel/Resources/BuiltinKeymaps.ska");

			if (keymapArchive == null)
				TextMode.WriteLine (Kernel.String ("ERROR -- archive is zero"));
			
			TextMode.Write (Kernel.String ("Keymap archive: installed at 0x"));
			TextMode.WriteNumber (true, (int)keymapArchive);
			TextMode.WriteLine ();

			keymapEntries = *(int*)keymapArchive;

			TextMode.Write (Kernel.String ("Keymap archive: "));
			TextMode.WriteNumber (true, keymapEntries);
			TextMode.WriteLine (Kernel.String (" entries"));

			keymapAddr = GetBuiltinKeymap (userKeymap, userKeymapLen);

			if (keymapAddr == null) {
				TextMode.WriteLine (Kernel.String ("failed"));
			} else {
				SetKeymap (keymapAddr);
				TextMode.WriteLine (Kernel.String ("done"));
			}
		}

		/// <summary>
		/// Installs the default and shifted key tables of the given
		/// keymap, so that all further keyboard scancodes are
		/// converted using the new mapping. 
		/// </summary>
		public static void SetKeymap (byte *keymap)
		{
			byte *defmap = null, shiftmap = null;
			int defmapLen = 0, shiftmapLen = 0;

			defmap = GetDefaultTable (keymapAddr, &defmapLen);
			shiftmap = GetShiftedTable (keymapAddr, &shiftmapLen);
			
			Keyboard.SetKeymap (defmap, defmapLen, shiftmap, shiftmapLen);
		}
		
		/// <summary>
		/// Gets the address of a builtin keymap included in the kernel
		/// via the keymap archive resource in SharpOS.Kernel.dll. The
		/// archive is generated by the SharpOS keymap compiler.
		/// </summary>
		public static void *GetBuiltinKeymap (byte *name, int nameLen)
		{
			byte *table = (byte*)keymapArchive + 4;
			byte *buf = Kernel.Alloc (100);
			for (int x = 0; x < keymapEntries; ++x) {
				int nSize = 0;
				int tSize = 0;
				int error = 0;
				int strSize = 0;
				
				strSize = BinaryTool.ReadPrefixedString (table, buf,
					100, &error);

				table += strSize;
				nSize = ByteString.Length (buf);
				
				TextMode.Write (Kernel.String ("nsize: "));
				TextMode.WriteNumber (false, nSize);
				TextMode.WriteLine ();

				TextMode.Write (Kernel.String ("found keymap: "));
				TextMode.WriteLine (buf);
				
				if (nSize == nameLen && ByteString.Compare (name,
				    buf, nameLen) == 0) {
					return table;
				}

				table += 2; // keymask/statebit

				// default table
				
				tSize = *(int*)table;
				table += 4;
				table += tSize;

				// shifted table
				
				tSize = *(int*)table;
				table += 4;
				table += tSize;
			}

			return null;
		}

		public static int GetBuiltinKeymapsCount ()
		{
			return keymapEntries;
		}
		
		/// <summary>
		/// Gets the addresses 
		/// </summary>
		public static void *GetBuiltinKeymap (int id)
		{
			byte *table = (byte*)keymapArchive + 4;
			
			for (int x = 0; x < keymapEntries; ++x) {
				
				if (x == id)
					return (void*) table;

				// name-size (4), name string (x), keymask and statebit (2)
							
				table += 6 + *(int*)table;

				// table size (4), default table (x)
				
				table += 4 + *(int*)table;

				// table size (4), shifted table (x)
				
				table += 4 + *(int*)table;
			}

			return null;
		}
		
		/// <summary>
		/// Gets the keymap currently in use.
		/// </summary>
		public static void *GetCurrentKeymap ()
		{
			return keymapAddr;
		}

		/// <summary>
		/// Sets the keymap returned by GetCurrentKeymap.
		/// </summary>
		public static void SetKeymap (void *keymap)
		{
			keymapAddr = keymap;
		}

		/// <summary>
		/// Sets the current keymap to a built-in one specified by
		/// <paramref name="name" />.
		/// </summary>
		public static void SetBuiltinKeymap (byte *name, int nameLen)
		{
			SetKeymap (GetBuiltinKeymap (name, nameLen));
		}
		
		/// <summary>
		/// Gets the `default' table of the given keymap.
		/// </summary>
		public static byte *GetDefaultTable (void *keymap, int *ret_len)
		{
			int nlen = *(int*)keymap;
			*ret_len = *(int*)((byte*)keymap + 6 + nlen);
			
			return (byte*)keymap + 10;
		}

		/// <summary>
		/// Gets the `shifted' table of the given keymap.
		/// </summary>
		public static byte *GetShiftedTable (void *keymap, int *ret_len)
		{
			int dLen = 0;
			byte *ptr = GetDefaultTable (keymap, &dLen);

			ptr += dLen;
			*ret_len = *(int*)ptr;

			return ptr + 4;
		}

		/// <summary>
		/// Gets the `default' table of the installed keymap.
		/// </summary>
		public static byte *GetDefaultTable (int *ret_len)
		{
			Kernel.Assert (keymapAddr != null,
				Kernel.String ("No keymap is installed!"));
			
			return GetDefaultTable (keymapAddr, ret_len);
		}

		/// <summary>
		/// Gets the `shifted' table of the installed keymap.
		/// </summary>
		public static byte *GetShiftedTable (int *ret_len)
		{
			Kernel.Assert (keymapAddr != null,
				Kernel.String ("No keymap is installed!"));
			
			return GetShiftedTable (keymapAddr, ret_len);
		}

		/// <summary>
		/// Gets the keymask specified in the given keymap.
		/// </summary>
		public static byte GetKeyMask (void *keymap)
		{
			int nlen = *(int*)keymap;
			
			return *((byte*)keymap + 4 + nlen);
		}
		
		/// <summary>
		/// Gets the state bit specified in the given keymap.
		/// </summary>
		public static byte GetStateBit (void *keymap)
		{
			int nlen = *(int*)keymap;
			
			return *((byte*)keymap + 5 + nlen);
		}
		
		/// <summary>
		/// Gets the keymask of the installed keymap.
		/// </summary>
		public static byte GetKeyMask ()
		{
			Kernel.Assert (keymapAddr != null, Kernel.String (
				"No keymap is installed!"));
			
			return GetKeyMask (keymapAddr);
		}
		
		/// <summary>
		/// Gets the state bit of the installed keymap.
		/// </summary>
		public static byte GetStateBit ()
		{
			Kernel.Assert (keymapAddr != null, Kernel.String (
				"No keymap is installed!"));
			
			return GetStateBit (keymapAddr);
		}
		
		static int userKeymapLen = 0;
		static byte *userKeymap;
		static void *keymapArchive;
		static int keymapEntries;
		static void *keymapAddr;
	}
}

